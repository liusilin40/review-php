<?php
/**
* @file constant.php
* @brief 本文件是对“php手册-语言参考-常量”部分的实践与理解
* @author 640
* @version 1.0
* @date 2017-06-29
*/

/**
 * 常量
 * 表示方式：[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*  传统上常量标识符总是大写的。 
 *
 * 定义方式：
 *      1. define()
 *      2. const关键字      php5.3之后引入
 *
 *      其中，define()在运行时定义常量。因此可以用任意的表达式给他赋值。而const关键字则是在编译时定义常量，因此const定
 *      义常量必须处于“最顶端的作用区域(at the top-level scope)”，不能定义在函数、循环、if、try/catch中。另外，const在
 *      赋值方面也有一定的限制，见下面。
 *
 *      在使用const关键字时，在php5.6之前，只能用标量，即bool\int\float\string来赋值。php5.6以后，可以用标量表达式给常
 *      量赋值，并且可以用数组常量给常量赋值（而对于define()在php7才能够用数组常量给常量赋值）。
 *
 * 获取常量值：
 *      1. 用常量名获取
 *      2. constant()  这个函数可以用在常量名是动态变化的情况下。
 *
 *      当你使用一个未定义的常量名来获取常量值时，php会假定你就是想获取这个常量本身的名字。即假如没有定义常量BAR，这时
 *      echo BAR;会输出BAR。(需要注意的时：虽然输出了BAR，但是BAR并不会存在于常量列表中。因为使用defined()检验其并不存
 *      在)
 *
 * 作用范围：
 *      和superglobals一样，常量的范围是全局的。不用管作用区域就可以在脚本的任何地方访问常量。
 * 
 * 分类：
 *      1. 普通常量.(一旦被定义，就不能被更改或者重定义)
 *      2. 魔术常量.(虽然叫作常量，并且使用模式、作用范围与常量一致，但是本质上因为其值是可以变化的，不是真正的常量)
 *
 * 相关函数：
 *       constant()    获取常量的值
 *       get_defined_constants()        获取所有已定义的常量列表
 *       defined()      检验常量是否已定义
 */
$a='a';
define('AA',$a.'123');      //运行时定义常量，别切可以使用表达式赋值。
echo AA;

const BB = 1+2;             //在php5.6之前，报错。php5.6之后正常
echo BB;

//php5.6后可以正常工作
const ANIMALS = array('dog', 'cat', 'bird');
echo ANIMALS[1]; // outputs "cat"


// Works as of PHP 7
define('ANIMALS', array(
    'dog',
    'cat',
    'bird'
));
echo ANIMALS[1]; // outputs "cat"

echo AFDJKK;        //输出： AFDJKK

/**
 * 魔术常量
 * 魔术常量它们的值随着它们在代码中的位置改变而改变。例如 __LINE__ 的值就依赖于它在脚本中所处的行来决定。
 *
 * 魔术常量：
 *      1. __LINE__     文件中的当前行号。
 *      2. __FILE__     文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。自 PHP 4.0.2 起，__FILE__ 
 *                      总是包含一个绝对路径（如果是符号连接，则是解析后的绝对路径），而在此之前的版本有时会包含一个相
 *                      对路径。
 *      3. __DIR__      文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。它等价于dirname(__FILE__)。
 *                      除非是根目录，否则目录中名不包括末尾的斜杠。（PHP 5.3.0中新增） 
 *      4. __FUNCTION__    函数名称（PHP 4.3.0 新加）。自 PHP 5 起本常量返回该函数被定义时的名字（区分大小写）。在PHP4 
 *                         中该值总是小写字母的。
 *      5. __CLASS__   类的名称（PHP 4.3.0 新加）。自 PHP 5 起本常量返回该类被定义时的名字（区分大小写）。在 PHP 4中该
 *                     值总是小写字母的。类名包括其被声明的作用区域（例如 Foo\Bar）。注意自 PHP 5.4 起 __CLASS__ 对 
 *                     trait也起作用。当用在 trait 方法中时，__CLASS__ 是调用 trait 方法的类的名字。
 *      6. __TRAIT__   Trait 的名字（PHP 5.4.0 新加）。自 PHP 5.4 起此常量返回 trait 被定义时的名字（区分大小写）。Trait 
 *                      名包括其被声明的作用区域（例如 Foo\Bar）。
 *      7. __METHOD__  类的方法名（PHP 5.0.0 新加）。返回该方法被定义时的名字（区分大小写）。
 *      8. __NAMESPACE__   当前命名空间的名称（区分大小写）。此常量是在编译时定义的（PHP 5.3.0 新增）。 
 */
