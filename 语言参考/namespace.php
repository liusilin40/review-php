<?php
/**
* @file namespace.php
* @brief 本文件是对“php手册-语言参考-命名空间”部分的实践与理解
* @author 640
* @version 1.0
* @date 2017-06-30
 */

/**
 * 为什么需要命名空间？
 *  在PHP中，命名空间用来解决在编写类库或应用程序时创建可重用的代码如类或函数时碰到的两类问题：
 *
 *      1. 用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。
 *      2. 为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。
 *  PHP 命名空间提供了一种将相关的类、函数和常量组合到一起的途径。
 *
 *  注意：名为PHP或php的命名空间，以及以这些名字开头的命名空间（例如PHP\Classes）被保留用作语言内核使用，而不应该在用户
 *  空间的代码中使用。 
 */

/**
 * 命名空间
 *
 * 要注意的几点：
 *  1. 任何合法的php代码都可以定义在命名空间之中，但是只有类（包含抽象类、traits）、接口、函数和常量会受命名空间的影响。
 *  2. 在声明命名空间之前唯一合法的代码是用于定义源文件编码方式的 declare 语句。另外，所有非 PHP代码包括空白符都不能出
 *  现在命名空间的声明之前.(注释可以存在在namespace之前，应该是在编译之前注释已经被消除了) 
 *  3. 一个文件中可以包含多个命名空间。
 *
 * 命名空间中元素的使用。类、接口、函数、常量的引用方式分为以下几种：
 *  1. 非限定名称
 *  2. 限定名称
 *  3. 完全限定名称
 *
 * 动态语言特征和命名空间：
 *  通常，名称的解析是在编译是解析的。但是，当使用动态语言特性时，类、接口、函数、常量的名称在运行时才能确定，所以他们
 *  并不是在编译时解析，而是在运行时解析。且当前脚本的申明的命名空间并不会对这些名称造成影响，这些名称都处于全局空间中。
 *
 * __NAMESPACE__魔术常量
 *
 * namespace关键帧：
 *  作用：1. 声明命名空间
 *        2. 关键字 namespace 可用来显式访问当前命名空间或子命名空间中的元素。它等价于类中的 self 操作符。 
 *
 * 使用命名空间：别名/导入
 *  允许通过别名引用或导入外部的完全限定名称，是命名空间的一个重要特征。
 *  所有支持命名空间的PHP版本支持三种别名或导入方式：为类名称使用别名、为接口使用别名或为命名空间名称使用别名。PHP 
 *  5.6开始允许导入函数或常量或者为它们设置别名。 
 *  在PHP中，别名是通过操作符 use 来实现的.
 *
 * 使用命名空间：后备全局函数/常量 
 *  在一个命名空间中，当 PHP遇到一个非限定的类、函数或常量名称时，它使用不同的优先策略来解析该名称。
 *  类名称总是解析到当前命名空间中的名称。因此在访问系统内部或不包含在命名空间中的类名称时，必须使用完全限定名称
 *  对于函数和常量来说，如果当前命名空间中不存在该函数或常量，PHP 会退而使用全局空间中的函数或常量。 
 *
 * 名称解析遵循下列规则：
 *  1. 对完全限定名称的函数，类和常量的调用在编译时解析。例如 new \A\B 解析为类 A\B。 
 *  2. 所有的非限定名称和限定名称（非完全限定名称）根据当前的导入规则在编译时进行转换。例如，如果命名空间 A\B\C 被导入为 
 *  C，那么对 C\D\e() 的调用就会被转换为 A\B\C\D\e()。 
 *  3. 在命名空间内部，所有的没有根据导入规则转换的限定名称均会在其前面加上当前的命名空间名称。例如，在命名空间 A\B 
 *  内部调用 C\D\e()，则 C\D\e() 会被转换为 A\B\C\D\e() 。 
 *  4. 非限定类名根据当前的导入规则在编译时转换（用全名代替短的导入名称）。例如，如果命名空间 A\B\C 导入为C，则 new C() 
 *  被转换为 new A\B\C() 。 
 *  5. 在命名空间内部（例如A\B），对非限定名称的函数调用是在运行时解析的。例如对函数 foo() 的调用是这样解析的： 
 *      1. 在当前命名空间中查找名为 A\B\foo() 的函数 
 *      2. 尝试查找并调用 全局(global) 空间中的函数 foo()。 
 *  6. 在命名空间（例如A\B）内部对非限定名称或限定名称类（非完全限定名称）的调用是在运行时解析的。下面是调用 new C() 及 
 *  new D\E() 的解析过程： 
 *      new C()的解析: 
 *      1. 在当前命名空间中查找A\B\C类。 
 *      2. 尝试自动装载类A\B\C。 
 *
 *      new D\E()的解析: 
 *      1. 在类名称前面加上当前命名空间名称变成：A\B\D\E，然后查找该类。 
 *      2. 尝试自动装载类 A\B\D\E。 
 *
 *      注：为了引用全局命名空间中的全局类，必须使用完全限定名称 new \C()。 
 */

